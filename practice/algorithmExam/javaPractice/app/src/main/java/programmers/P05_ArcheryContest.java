package programmers;

public class P05_ArcheryContest {

  public static void main(String[] args) {
    int n = 5;
    int[] info = {2,1,1,1,0,0,0,0,0,0,0};



    int[] answer = solution(n, info);

    System.out.println(answer);

  }

  public static int[] solution(int n, int[] info) {
    int[] answer = {};
    return answer;
  }

}

/*
n   info    result
5   [2,1,1,1,0,0,0,0,0,0,0] [0,2,2,0,1,0,0,0,0,0,0]
1   [1,0,0,0,0,0,0,0,0,0,0] [-1]
9   [0,0,1,2,0,1,1,1,1,1,1] [1,1,2,0,1,2,2,0,0,0,0]
10  [0,0,0,0,0,0,0,0,3,4,3] [1,1,1,1,1,1,1,1,0,0,2]

최종 우승 점수 : 라이언 > 어피치

가장 큰 점수차로 이겨야 함

가장 큰 점수차로 이기는 경우가 2개 이상이면 가장 낮은 점수를 더 많이 맞춘걸 선택
- 가장 낮은 점수를 맞힌 개수가 같으면 그 다음 낮은 점수를 더 많이 맞춘걸 선택

라이언이 우승할 방법이 없으면 [-1] 리턴


경우의 수 예시
n = 5
어피치
[2,1,1,1,0,0,0,0,0,0,0] : 15

라이언
[3,2,0,0,0,0,0,0,0,0,0] : 19
[0,2,2,0,1,0,0,0,0,0,0] : 23 = 9 8 6
[0,0,2,2,1,0,0,0,0,0,0] : 21
[0,0,0,2,1,1,1,0,0,0,0] : 22 = 7 6 5 4
[0,0,0,0,1,1,1,1,1,0,0] : 20 = 6 5 4 3 2

방법1: 15 초과하는 점수 배열 생성
방법2: 10부터 승리 위치 지정
[3,2,0,0,0,0,0,0,0,0,0] : 19
[/,/, , , , , , , , , ]


 */

